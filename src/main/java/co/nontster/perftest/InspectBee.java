package co.nontster.perftest;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Options;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

import net.lightbody.bmp.BrowserMobProxy;
import net.lightbody.bmp.BrowserMobProxyServer;
import net.lightbody.bmp.client.ClientUtil;
import net.lightbody.bmp.core.har.Har;
import net.lightbody.bmp.core.har.HarLog;
import net.lightbody.bmp.core.har.HarNameVersion;

public class InspectBee {
	
	private static final Logger LOGGER = LogManager.getLogger(InspectBee.class.getName());
	private static final int WAIT_TIME = 20000; // wait 20 sec.
	
	private static final String targetURL = "https://outlook.office.com";
	private static final String esIdxPrefix = "o365-outlook-logon";
	
	static String getIdxString(String idx){
		
		SimpleDateFormat df = new SimpleDateFormat("yyyy.MM");
		Date now = new Date();
	    String strDate = df.format(now);
	    
	    strDate = idx + "-" + strDate;
	    
	    return strDate;
	}
	
	public static void main(String[] args) {
		
		// create Options object
		Options cliOpts = new Options();
		String source = null;
		
		try {
				
			// check and parse argument variables
			CommandLine cmd = CliUtils.parseAndHelp("inspectbee", cliOpts, args);
			
			if(cmd.hasOption("source")){
				source = cmd.getOptionValue("source");
			} 
			
			if(!cmd.hasOption("des")){
				if(cmd.hasOption("e_username") && cmd.hasOption("e_password")){
					
				} else {
					LOGGER.info("Without -des option you need to specify both elastic search username/password through -eu and -ep option.");
					System.exit(0);
				}
			}
									
			// start the proxy
			BrowserMobProxy proxyServer = new BrowserMobProxyServer();
			proxyServer.start();

			// get the Selenium proxy object
			Proxy proxy = ClientUtil.createSeleniumProxy(proxyServer);
				
			proxy.setHttpProxy("localhost:"+ proxyServer.getPort()); //The port generated by server.start();
			proxy.setSslProxy("localhost:"+ proxyServer.getPort());
					
			// configure it as a desired capability
			DesiredCapabilities capabilities = new DesiredCapabilities();
			capabilities.setCapability(CapabilityType.PROXY, proxy);		
			capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
				
			ChromeOptions options = new ChromeOptions();
	        options.setBinary("/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary");		
	        //options.addArguments("--kiosk");
	        capabilities.setCapability(ChromeOptions.CAPABILITY, options);
	        
			// start the browser up
			WebDriver driver = new ChromeDriver(capabilities);
			
			String idxStr = getIdxString(esIdxPrefix);
			
			// create a new HAR with the label "o365-outlook-logon-yyyy-MM"
			proxyServer.newHar(idxStr);
			
			// Navigate to outlook page
			driver.get(targetURL);
			
			// Get userId element
			WebElement userIdInputText = driver.findElement(By.id("cred_userid_inputtext"));
			
			userIdInputText.click();
			userIdInputText.clear();	
			
			// Input userId
			userIdInputText.sendKeys(cmd.getOptionValue("username"));
			
			Thread.sleep(5000);
			
			// Get password field
			WebElement passwordInputText = driver.findElement(By.id("cred_password_inputtext"));
			
			passwordInputText.click();
			passwordInputText.clear();	
			
			// Input password
			passwordInputText.sendKeys(cmd.getOptionValue("password"));
			Thread.sleep(3000);
			
			driver.findElement(By.id("cred_sign_in_button")).click();
			Thread.sleep(10000);
					
			// get the HAR data
			Har har = proxyServer.getHar();
			HarLog harLog = har.getLog();
			
			Date startDate = harLog.getEntries().get(0).getStartedDateTime();
			SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmssSSS");
			String dateString = df.format(startDate);
			
			//logonHarLog.setComment(source);
			
			HarNameVersion creator = new HarNameVersion(source, "1.0");		
			harLog.setCreator(creator);
			
			// wait for all requests completed
			Thread.sleep(WAIT_TIME);
			
			// If we would like to keep full HAR log file
			if(cmd.hasOption("hsdir")){
				String hsDir = cmd.getOptionValue("hsdir");	
				if(hsDir.charAt(hsDir.length()-1)!=File.separatorChar){
					hsDir += File.separator;
				}
				
				hsDir = hsDir.replaceFirst("^~",System.getProperty("user.home"));
				
				// create nested dir to store HAR logs 
				SimpleDateFormat harLogdf = new SimpleDateFormat("yyyyMMdd");
				hsDir = hsDir + "harlog" + File.separatorChar + harLogdf.format(new Date()) + File.separatorChar;
				FileUtils.forceMkdir(new File(hsDir));
								
				FileOutputStream logonFos = new FileOutputStream(hsDir+ "o365-outlook-logon_"+ dateString +".json");
				har.writeTo(logonFos);								
			}
						
			// print debug har log stream
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			har.writeTo(baos);		
			LOGGER.debug(baos.toString());
			
			// extract all metrics and indexing in Elasticsearch
			if (!cmd.hasOption("des") && cmd.hasOption("e_username") && cmd.hasOption("e_password")) {

				String bulkJsonRequest = EsUtils.buildBulkIdx(harLog, idxStr, "har", source, targetURL);
				LOGGER.debug(bulkJsonRequest);

				EsUtils.bulkStore(cmd.getOptionValue("e_username"), cmd.getOptionValue("e_password"), bulkJsonRequest);
			}
			
			// Stop Browser-mob proxy
			proxyServer.stop();
			
			//Close the browser
			driver.close();
			driver.quit();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (java.lang.IllegalArgumentException e){
			//e.printStackTrace();
		}		
	}
}
